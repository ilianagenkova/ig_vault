#!/bin/sh  							#!/bin/sh  
#PBS -N obsproc_%JTYP%_dump_%PDY%_%CC%_%DESC%			#PBS -N obsproc_%JTYP%_dump_%PDY%_%CC%_%DESC%
#PBS -j oe							#PBS -j oe
#PBS -S /bin/bash						#PBS -S /bin/bash
#PBS -q dev							#PBS -q dev
#PBS -l walltime=00:20:00					#PBS -l walltime=00:20:00
#PBS -A OBSPROC-DEV						#PBS -A OBSPROC-DEV
#PBS -l place=vscatter,select=1:ncpus=14:mem=160gb	      |	#PBS -l place=vscatter,select=1:ncpus=14:mem=100gb <--IG: THIS DIFFERENCE IS OK
#PBS -l debug=true						#PBS -l debug=true

##############################################			##############################################
# Submit notes:%						# Submit notes:%
# Run from [ps]tmp when running manually			# Run from [ps]tmp when running manually
# When running from cron, output is written to /u/$USER. Bott	# When running from cron, output is written to /u/$USER. Bott
# For specific PDY:						# For specific PDY:
# > jtyp=[gdas][gfs] cyc=00 PDY=20170126 desc=somethingfun /u |	# > jtyp=gdas cyc=12 PDY=20230411 desc=wc2para bash -l /u/ili <--IG: THESE LINES ARE COMMENTED OUT, so they don't matter
							      >	# > jtyp=gfs cyc=12 PDY=20230411 desc=wc2para bash -l /u/ilia
# For latest/current PDY:					# For latest/current PDY:
# > jtyp=[gdas][gfs] cyc=00 desc=somethingfun /u/iliana.genko |	# > jtyp=[gdas][gfs] cyc=00 desc=somethingfun /u/Shelley.Melc
# cycqsub location: /u/iliana.genkova/bin 		      |	# cycqsub location: /u/Shelley.Melchior/bin 
##############################################			##############################################

set -xu								set -xu

export envir=prod						export envir=prod

export cyc=%CC%							export cyc=%CC%
DESC=%DESC%							DESC=%DESC%
JTYP=%JTYP%							JTYP=%JTYP%
export job=${JTYP}_dump_$cyc					export job=${JTYP}_dump_$cyc
export jobid=$job.$PBS_JOBID					export jobid=$job.$PBS_JOBID
export PDY=%PDY%						export PDY=%PDY%

userROOT=/lfs/h2/emc/obsproc/noscrub/$USER		      |	userROOT=/lfs/h2/emc/obsproc/noscrub/wei.w.li <--IG: this is ok

export obsproc_ver=v1.2						export obsproc_ver=v1.2
export obsproc_ver_pckg=v1.1.0					export obsproc_ver_pckg=v1.1.0
#export bufr_dump_ver=1.0.0				      |	export bufr_dump_ver=1.0.1       <--IG: this is ok to have
export obsNET=obsproc						export obsNET=obsproc
#PACKAGEROOTpara=/lfs/h1/ops/para/packages		      |	PACKAGEROOTpara=/lfs/h1/ops/para/packages
#export HOMEobsproc=${PACKAGEROOTpara}/obsproc.${obsproc_ver_	#export HOMEobsproc=${PACKAGEROOTpara}/obsproc.${obsproc_ver_
#export HOMEobsproc=${PACKAGEROOT}/obsproc.${obsproc_ver_pckg	#export HOMEobsproc=${PACKAGEROOT}/obsproc.${obsproc_ver_pckg
#export HOMEobsproc=${userROOT}/install/obsproc-rel.v1.0.0    |	export HOMEobsproc=${userROOT}/obsproc      # local <--IG: this looks good
export HOMEobsproc=${userROOT}/GIT/play/obsproc.12            <

VERSION_FILE=$HOMEobsproc/versions/run.ver                    |	VERSION_FILE=$HOMEobsproc/versions/run.ver
#VERSION_FILE=${userROOT}/install/obsproc-rel.v1.0.0/versions <     <--IG: these are commented lines, so they don't matter
#VERSION_FILE=${userROOT}/GIT/obsproc/versions/run.ver        <
if [ -f $VERSION_FILE ]; then					if [ -f $VERSION_FILE ]; then
   . $VERSION_FILE						   . $VERSION_FILE
else								else
  echo Need version info...  Exiting...				  echo Need version info...  Exiting...
 exit 7								 exit 7
fi								fi

#already in versioins/run.ver :)			      <
export bufr_dump_ver=1.2.1 #1.0.0			      < IG: ADD A LINE HERE: export bufr_dump_ver=1.0.1
							      <
echo 'ILIANA VERSIONS set'				      <
# Load the modules specified in $VERSION_FILE			# Load the modules specified in $VERSION_FILE
module load libjpeg						module load libjpeg
module load grib_util/${grib_util_ver}				module load grib_util/${grib_util_ver}
module load netcdf/${netcdf_ver}				module load netcdf/${netcdf_ver}
# use para installation					      <
#module use /apps/ops/para/nco/modulefiles/compiler/intel/19. <
#module use ${userROOT}/install/bufr-dump/modulefiles	      <
#module unload bufr_dump/${bufr_dump_ver}		      <
#module use ${userROOT}/GIT/play/bufr-dump.R12/install/module <
#module load bufr_dump/${bufr_dump_ver}			      <
#echo LOADED ILIANA bufr-dump				      <
#module use ${userROOT}/GIT/prepobs/install/modulefiles	      <
module load intel/${intel_ver}					module load intel/${intel_ver}
module load craype/${craype_ver}				module load craype/${craype_ver}
module load cray-mpich/${cray_mpich_ver}			module load cray-mpich/${cray_mpich_ver}
module load cray-pals/${cray_pals_ver}				module load cray-pals/${cray_pals_ver}
module load cfp/${cfp_ver}					module load cfp/${cfp_ver}
							      |	# use para installation
							      |	module use /apps/ops/prod/nco/modulefiles/compiler/intel/19.1
module unload bufr_dump					      |	# use local bufr_dump installation
module use ${userROOT}/GIT/play/bufr-dump.12/install/modulefi |	#module unload bufr_dump
							      >	#module use ${userROOT}/install/bufr_dump/modulefiles
							      >	#module use ${userROOT}/install/bufr-dump-rel.1.0.0/modulefil
module load bufr_dump/${bufr_dump_ver}				module load bufr_dump/${bufr_dump_ver}
echo LOADED ILIANA bufr-dump				      <
echo $BUFR_DUMPLIST					      <

# Be sure the modules are loaded 				# Be sure the modules are loaded 
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)prod_util/") -eq	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)prod_util/") -eq
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)prod_envir/") -e	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)prod_envir/") -e
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)libjpeg/") -eq 0	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)libjpeg/") -eq 0
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)grib_util/") -eq	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)grib_util/") -eq
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)netcdf/") -eq 0 	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)netcdf/") -eq 0 
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)bufr_dump/") -eq	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)bufr_dump/") -eq
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)intel/") -eq 0 ]	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)intel/") -eq 0 ]
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)craype/") -eq 0 	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)craype/") -eq 0 
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cray-mpich/") -e	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cray-mpich/") -e
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cray-pals/") -eq	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cray-pals/") -eq
if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cfp/") -eq 0 ]];	if [[ $(echo $LOADEDMODULES | egrep -c "(^|:)cfp/") -eq 0 ]];


export SENDECF=NO   # developer					export SENDECF=NO   # developer
export SENDDBN=NO   # developer					export SENDDBN=NO   # developer
export SENDSDM=NO   # developer					export SENDSDM=NO   # developer

export TANK=$DCOMROOT						export TANK=$DCOMROOT
#export TANK_002001=/lfs/h1/ops/dev/dcom/ # dev tank 002/001  <
							      <
# GMI tanks are in prod already June 2022		      <
#export TANK_021246=/lfs/h2/emc/obsproc/noscrub/ashley.stanfi <

#export EPRM=${userROOT}/sample_sdmedit.txt		      |	export DATAROOT=/lfs/h2/emc/obsproc/noscrub/wei.w.li 
#export EPRM=/lfs/h2/emc/obsproc/noscrub/iliana.genkova/SDMED |	export jlogfile=/lfs/h2/emc/stmp/wei.w.li/${JTYP}.$PDY.jlogfi
							      <
export DATAROOT=/lfs/h2/emc/stmp/$USER 			      <
export jlogfile=/lfs/h2/emc/stmp/$USER/${JTYP}.$PDY.jlogfile  <

export COMOUT_ROOT=${DATAROOT}/CRON/${DESC}/com			export COMOUT_ROOT=${DATAROOT}/CRON/${DESC}/com
export COMPONENT=atmos						export COMPONENT=atmos

export DEBUG_LEVEL=3						export DEBUG_LEVEL=3
export LOUD=on #ON					      |	export LOUD=ON   <--IG: make this "on" with small letter!!!
export KEEPDATA=YES						export KEEPDATA=YES


$HOMEobsproc/jobs/JOBSPROC_GLOBAL_DUMP				$HOMEobsproc/jobs/JOBSPROC_GLOBAL_DUMP
err=$?								err=$?

echo 'ILIANA JOB COMPLETED but how??'			      <
							      <
# When run from cron, the stdout is written to /u/$USER		# When run from cron, the stdout is written to /u/$USER
# mv to stmp							# mv to stmp
pbsjobid=$(echo $PBS_JOBID | cut -d'.' -f1)			pbsjobid=$(echo $PBS_JOBID | cut -d'.' -f1)
cronlogfile=/u/$USER/$PBS_JOBNAME.o$pbsjobid		      |	cronlogfile=/u/wei.w.li/$.o$pbsjobid
outputdir=/lfs/h2/emc/stmp/${USER}/CRON/${DESC}/output	      |	cronlogfile=/u/wei.w.li/$PBS_JOBNAME.o$pbsjobid
							      >	outputdir=/lfs/h2/emc/stmp/wei.w.li/CRON/${DESC}/output
if [ -f "$cronlogfile" ]; then					if [ -f "$cronlogfile" ]; then
  mkdir -p $outputdir						  mkdir -p $outputdir
  mv $cronlogfile ${outputdir}/$PBS_JOBNAME.o$pbsjobid		  mv $cronlogfile ${outputdir}/$PBS_JOBNAME.o$pbsjobid
fi								fi

							      >	# If you wish to only run the dump job, un-comment the exit l
							      >	exit  <--IG: From here on th edifferenced dont matter!

# Kick off dump_post job					# Kick off dump_post job
if [ $err -eq 0 ]; then						if [ $err -eq 0 ]; then
  echo "submit jglobal_dump_post"				  echo "submit jglobal_dump_post"
  jtyp=$JTYP PDY=$PDY desc=$DESC bash -l /u/$USER/bin/cycqsub |	  jtyp=$JTYP PDY=$PDY desc=$DESC bash -l /u/iliana.genkova/bi
  ${userROOT}/Trigs.KEEP/jglobal_dump_post.wc2.pbs.R12 	      |	  /lfs/h2/emc/obsproc/noscrub/wei.w.li/Trigs.KEEP/jglobal_dum
  #/lfs/h2/emc/obsproc/noscrub/iliana.genkova/Trigs.KEEP/jglo <
fi								fi

exit							      <
							      <
# Kick off prep job						# Kick off prep job
if [ $err -eq 0 ]; then						if [ $err -eq 0 ]; then
  echo "submit jglobal_prep"					  echo "submit jglobal_prep"
  jtyp=$JTYP PDY=$PDY desc=$DESC bash -l /u/$USER/bin/cycqsub |	  jtyp=$JTYP PDY=$PDY desc=$DESC bash -l /u/iliana.genkova/bi
  ${userROOT}/Trigs.KEEP/jglobal_prep.wc2.pbs.R12	      |	  /lfs/h2/emc/obsproc/noscrub/wei.w.li/Trigs.KEEP/jglobal_pre
  #/lfs/h2/emc/obsproc/noscrub/iliana.genkova/Trigs.KEEP/jglo <
fi								fi

exit								exit
